"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockToolkitInfo = void 0;
/* eslint-disable import/order */
const api_1 = require("../../lib/api");
class MockToolkitInfo extends api_1.ToolkitInfo {
    static setup(toolkitInfo) {
        toolkitInfo = toolkitInfo ?? new MockToolkitInfo();
        const orig = api_1.ToolkitInfo.lookup;
        api_1.ToolkitInfo.lookup = jest.fn().mockResolvedValue(toolkitInfo);
        return {
            toolkitInfo,
            dispose: () => {
                api_1.ToolkitInfo.lookup = orig;
            },
        };
    }
    constructor(props = {}) {
        super();
        this.found = true;
        this.stackName = 'MockBootstrapStack';
        this.bucketName = props.bucketName ?? 'MockToolkitBucketName';
        this.bucketUrl = props.bucketUrl ?? `https://${this.bucketName}.s3.amazonaws.com/`;
        this.version = props.version ?? 1;
        this.variant = api_1.DEFAULT_BOOTSTRAP_VARIANT;
        this._bootstrapStack = props.bootstrapStack;
    }
    get bootstrapStack() {
        if (!this._bootstrapStack) {
            throw new Error('Bootstrap stack object expected but not supplied to MockToolkitInfo');
        }
        return this._bootstrapStack;
    }
}
exports.MockToolkitInfo = MockToolkitInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay10b29sa2l0aW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1vY2stdG9vbGtpdGluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQWlDO0FBQ2pDLHVDQUF1RTtBQVV2RSxNQUFhLGVBQWdCLFNBQVEsaUJBQVc7SUFDdkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUF5QjtRQUMzQyxXQUFXLEdBQUcsV0FBVyxJQUFJLElBQUksZUFBZSxFQUFFLENBQUM7UUFDbkQsTUFBTSxJQUFJLEdBQUcsaUJBQVcsQ0FBQyxNQUFNLENBQUM7UUFDaEMsaUJBQVcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTlELE9BQU87WUFDTCxXQUFXO1lBQ1gsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDWixpQkFBVyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDNUIsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBV0QsWUFBWSxRQUE4QixFQUFFO1FBQzFDLEtBQUssRUFBRSxDQUFDO1FBVk0sVUFBSyxHQUFHLElBQUksQ0FBQztRQUtiLGNBQVMsR0FBRyxvQkFBb0IsQ0FBQztRQU8vQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLElBQUksdUJBQXVCLENBQUM7UUFDOUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxJQUFJLFdBQVcsSUFBSSxDQUFDLFVBQVUsb0JBQW9CLENBQUM7UUFDbkYsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLCtCQUF5QixDQUFDO1FBQ3pDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBVyxjQUFjO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMscUVBQXFFLENBQUMsQ0FBQztTQUN4RjtRQUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUF2Q0QsMENBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L29yZGVyICovXG5pbXBvcnQgeyBUb29sa2l0SW5mbywgREVGQVVMVF9CT09UU1RSQVBfVkFSSUFOVCB9IGZyb20gJy4uLy4uL2xpYi9hcGknO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25TdGFjayB9IGZyb20gJy4uLy4uL2xpYi9hcGkvdXRpbC9jbG91ZGZvcm1hdGlvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9ja1Rvb2xraXRJbmZvUHJvcHMge1xuICByZWFkb25seSBidWNrZXROYW1lPzogc3RyaW5nO1xuICByZWFkb25seSBidWNrZXRVcmw/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHZlcnNpb24/OiBudW1iZXI7XG4gIHJlYWRvbmx5IGJvb3RzdHJhcFN0YWNrPzogQ2xvdWRGb3JtYXRpb25TdGFjaztcbn1cblxuZXhwb3J0IGNsYXNzIE1vY2tUb29sa2l0SW5mbyBleHRlbmRzIFRvb2xraXRJbmZvIHtcbiAgcHVibGljIHN0YXRpYyBzZXR1cCh0b29sa2l0SW5mbz86IFRvb2xraXRJbmZvKSB7XG4gICAgdG9vbGtpdEluZm8gPSB0b29sa2l0SW5mbyA/PyBuZXcgTW9ja1Rvb2xraXRJbmZvKCk7XG4gICAgY29uc3Qgb3JpZyA9IFRvb2xraXRJbmZvLmxvb2t1cDtcbiAgICBUb29sa2l0SW5mby5sb29rdXAgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodG9vbGtpdEluZm8pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvb2xraXRJbmZvLFxuICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICBUb29sa2l0SW5mby5sb29rdXAgPSBvcmlnO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIHJlYWRvbmx5IGZvdW5kID0gdHJ1ZTtcbiAgcHVibGljIHJlYWRvbmx5IGJ1Y2tldFVybDogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgYnVja2V0TmFtZTogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgdmVyc2lvbjogbnVtYmVyO1xuICBwdWJsaWMgcmVhZG9ubHkgdmFyaWFudDogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgc3RhY2tOYW1lID0gJ01vY2tCb290c3RyYXBTdGFjayc7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfYm9vdHN0cmFwU3RhY2s/OiBDbG91ZEZvcm1hdGlvblN0YWNrO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBNb2NrVG9vbGtpdEluZm9Qcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuYnVja2V0TmFtZSA9IHByb3BzLmJ1Y2tldE5hbWUgPz8gJ01vY2tUb29sa2l0QnVja2V0TmFtZSc7XG4gICAgdGhpcy5idWNrZXRVcmwgPSBwcm9wcy5idWNrZXRVcmwgPz8gYGh0dHBzOi8vJHt0aGlzLmJ1Y2tldE5hbWV9LnMzLmFtYXpvbmF3cy5jb20vYDtcbiAgICB0aGlzLnZlcnNpb24gPSBwcm9wcy52ZXJzaW9uID8/IDE7XG4gICAgdGhpcy52YXJpYW50ID0gREVGQVVMVF9CT09UU1RSQVBfVkFSSUFOVDtcbiAgICB0aGlzLl9ib290c3RyYXBTdGFjayA9IHByb3BzLmJvb3RzdHJhcFN0YWNrO1xuICB9XG5cbiAgcHVibGljIGdldCBib290c3RyYXBTdGFjaygpOiBDbG91ZEZvcm1hdGlvblN0YWNrIHtcbiAgICBpZiAoIXRoaXMuX2Jvb3RzdHJhcFN0YWNrKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcCBzdGFjayBvYmplY3QgZXhwZWN0ZWQgYnV0IG5vdCBzdXBwbGllZCB0byBNb2NrVG9vbGtpdEluZm8nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2Jvb3RzdHJhcFN0YWNrO1xuICB9XG59XG4iXX0=